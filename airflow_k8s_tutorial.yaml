# 01. namespace
apiVersion: v1
kind: Namespace
metadata:
  name: airflow

# 02. pv and pvc
apiVersion: v1
kind: PersistentVolume
metadata:
  name: airflow-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/srv/airflow" # 사전 준비에서 생성한 경로
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: airflow-pvc
  namespace: airflow
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
  storageClassName: "" # 기본 StorageClass를 사용하지 않도록 비워둡니다.
  volumeName: airflow-pv

# 03. rbac
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: airflow
  name: airflow-worker-role
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["create", "get", "list", "watch", "delete", "patch"]
  - apiGroups: [""]
    resources: ["pods/log"]
    verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: airflow
  name: airflow-worker-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: airflow-worker-role
subjects:
  - kind: ServiceAccount
    name: default # 기본 서비스 계정에 권한 부여
    namespace: airflow

# 04. configmap
apiVersion: v1
kind: ConfigMap
metadata:
  name: airflow-config
  namespace: airflow
data:
  airflow.cfg: |
    [core]
    dags_folder = /opt/airflow/dags
    executor = KubernetesExecutor
    fernet_key = dummy_fernet_key_replace_me_with_real_one # Secret으로 관리해야 함
    load_examples = False

    [database]
    # 실제 환경에서는 PostgreSQL과 같은 외부 DB를 사용해야 합니다.
    sql_alchemy_conn = sqlite:////opt/airflow/airflow.db

    [kubernetes]
    worker_container_repository = apache/airflow
    worker_container_tag = slim-3.0.3-python3.12
    namespace = airflow
    dags_in_image = False
    in_cluster = True

# 05. deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: airflow
  namespace: airflow
spec:
  replicas: 1
  selector:
    matchLabels:
      app: airflow
  template:
    metadata:
      labels:
        app: airflow
    spec:
      containers:
        - name: airflow
          image: apache/airflow:slim-3.0.3-python3.12
          args: ["standalone"] # 웹서버, 스케줄러, 트리거 등을 한번에 실행
          env:
            - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
              valueFrom:
                configMapKeyRef:
                  name: airflow-config
                  key: airflow.cfg # 임시로 sqlite 사용
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: dags-volume
              mountPath: /opt/airflow/dags
            - name: logs-volume
              mountPath: /opt/airflow/logs
      volumes:
        - name: dags-volume
          persistentVolumeClaim:
            claimName: airflow-pvc
            subPath: dags
        - name: logs-volume
          persistentVolumeClaim:
            claimName: airflow-pvc
            subPath: logs

# 06. service
apiVersion: v1
kind: Service
metadata:
  name: airflow-service
  namespace: airflow
spec:
  type: NodePort
  ports:
    - port: 7777
      targetPort: 7777
      nodePort: 30077 # 원하는 포트로 변경 가능
  selector:
    app: airflow
